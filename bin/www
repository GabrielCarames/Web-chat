#!/usr/bin/env node

/**
 * Module dependencies.
 */

var app = require('../app');
var debug = require('debug')('discord:server');
var http = require('http');
const Message = require('../models/message');
const { converter } = require('../config/functions');

/**
 * Get port from environment and store in Express.
 */

var port = normalizePort(process.env.PORT || '3000');
app.set('port', port);

/**
 * Create HTTP server.
 */

var server = http.createServer(app);
var io = require('socket.io')(server);

/**
 * Listen on provided port, on all network interfaces.
 */

server.listen(port);
server.on('error', onError);
server.on('listening', onListening);

// socket.io configs

io.on('connection', (socket) => {
  
  // SI EL USuario se conecto, se guarda su nombre y se lo envia al cliente
  socket.on('connected',(username) => {
    socket.username = username
    socket.broadcast.emit('userconnect', username)
  })

  // Cuando el usuario se conecta se findea los mensajes del campo Message y se lo manda al cliente

  Message.find().then(function (data){
    socket.emit("chathistory", data)
  })

  // Recibe y envia al cliente el mensaje del usuario

  socket.on('message', async (data) => {
    const {message, username} = data
    const newMessage = new Message({message, username})
    await newMessage.save();
    var createdAtMessage = await Message.findOne({message: data.message})
    var createdAtDate = converter(createdAtMessage)
    io.emit('message', data, createdAtDate);
  });

  // Recibe y envia que un usuario esta escribiendo

  socket.on('typing', (data) => {
    socket.broadcast.emit('typing', data)
  });

  // Recibe y envia que un usuario se desconecto
  
  socket.on('disconnect',() => {
    io.emit('userdisconnect', socket.username)
  })
});

/**
 * Normalize a port into a number, string, or false.
 */

function normalizePort(val) {
  var port = parseInt(val, 10);

  if (isNaN(port)) {
    // named pipe
    return val;
  }

  if (port >= 0) {
    // port number
    return port;
  }

  return false;
}

/**
 * Event listener for HTTP server "error" event.
 */

function onError(error) {
  if (error.syscall !== 'listen') {
    throw error;
  }

  var bind = typeof port === 'string'
    ? 'Pipe ' + port
    : 'Port ' + port;

  // handle specific listen errors with friendly messages
  switch (error.code) {
    case 'EACCES':
      console.error(bind + ' requires elevated privileges');
      process.exit(1);
      break;
    case 'EADDRINUSE':
      console.error(bind + ' is already in use');
      process.exit(1);
      break;
    default:
      throw error;
  }
}

/**
 * Event listener for HTTP server "listening" event.
 */

function onListening() {
  var addr = server.address();
  var bind = typeof addr === 'string'
    ? 'pipe ' + addr
    : 'port ' + addr.port;
  debug('Listening on ' + bind);
}
