<link rel='stylesheet' href='/css/webchat.css' />
<script src="/socket.io/socket.io.js"></script>
<script src="//cdnjs.cloudflare.com/ajax/libs/moment.js/2.7.0/moment.min.js" type="text/javascript"></script>
<script src="//momentjs.com/downloads/moment-with-locales.js"></script>
<script src="/js/converter.js"></script>

<div id="notifications">

</div>

<h4 id="username" style="color: white;" hidden>{{username}}</h4>

<div class="d-flex justify-content-center" style="height: 100%;">
    <div class="mb-4 mt-5 w-75" style="height:60%;">
        <div class="row overflow-auto">
            <div class="col-md-9">
                <div class="row">
                    <div class="col-md-4 d-flex justify-content-start">
                        <h2 id="chatName">
                            
                        </h2>
                    </div>
                    <div class="col d-flex justify-content-end">
                        <div class="col d-flex align-items-center">
                            <button class="uk-button uk-button-default uk-button-small">Crear grupo</button>
                        </div>
                        <div class="col d-flex align-items-center">
                            <button class="uk-button uk-button-default uk-button-small">Configuración</button>
                        </div>
                        <div class="col d-flex align-items-center">
                            <button class="uk-button uk-button-default uk-button-small">Buscador</button>
                        </div>
                    </div>
                </div>
                <div id="messageContainer" class="row uk-overflow-auto" style="height:60vh;">
                    <div id="messages" class="col-md-12">

                    </div>
                </div>
                <div id="actions" class="row" style="margin-left: 2px;">
                    
                </div>
                <div class="row mt-2">
                    <div class="col-md-9">
                        <input id="messageToSend" class="uk-input" type="text" placeholder="Escribe un mensaje">
                    </div>
                    <div class="col d-flex align-items-center">
                        <button onClick="sendMessage()" class="uk-button uk-button-primary uk-button-small text-white"
                            style="background-color: #24263d;">Enviar mensaje</button>
                    </div>
                </div>
            </div>
            <div class="col">
                <h2>Amigos</h2>
                <div id="friendsPanel" class="ml-3">

                </div>
            </div>
        </div>
    </div>
</div>
<script>
    var socket = io();
    var username = $("#username").text()
    var chatId = (window.location.href).split('/')[4]
    var message = document.getElementById('messageToSend');
    var friendsPanel = document.getElementById('friendsPanel');

    function deleteMessage(messageId) {
        console.log(messageId)
        //la funcion recibe bien la id del mensaje pero no consigo que se muestre el modal y se envie el messageId a la ruta al mismo tiempo en este mismo espacio 
        //si se coloca el html del modal en la parte de html de arriba, all mostrar el modal con el 'show' de abajo, no hay manera de pasarle el messageId que recibe esta funcion
        //por eso se tiene que hacer todo desde la funcion
        document.innerHTML += 
        '<div id="modalDeleteMessage" class="modal fade" id="exampleModal" tabindex="-1" aria-labelledby="exampleModalLabel" aria-hidden="true">' +
            '<div class="modal-dialog">' +
                '<div class="modal-content">' +
                '<div class="modal-header">' +
                    '<h5 class="modal-title" id="exampleModalLabel">Eliminar mensaje</h5>' +
                    '<button type="button" class="close" data-dismiss="modal" aria-label="Close">' +
                        '<span aria-hidden="true">&times;</span>' +
                    '</button>' +
                '</div>' +
                '<div class="modal-body" style="color: black;">' +
                    '¿Estas seguro que deseas eliminar el mensaje?' +
                    '<small><br>El mensaje eliminado será informado</small>' +
                '</div>' +
                '<div class="modal-footer">' +
                    '<button type="button" class="btn btn-secondary" data-dismiss="modal">Cancelar</button>' +
                    '<button type="button" class="btn btn-primary" href="http://localhost:3000/chat/deletemessage/' + messageId + '">Eliminar mensaje</button>' +
                '</div>' +
                '</div>' +
            '</div>' +
        '</div>'
        $('#modalDeleteMessage').modal('show')
    }

    function updateMessage(messageContent) {
        //probe metiendo en la funcion tanto el objeto entero del message, el messageId y el messageContent; pero en todos los casos salia algun tipo de error
        //ahora esta todo intercalado entre message._id, messageContent por otro lado y todo desordenado
        console.log(messageContent)
        var messageToUpdate = document.getElementById(message._id);
        messageToUpdate.innerHTML += 
        '<div class="row mt-2">' +
            '<div class="col-md-10">' +
                '<input id="messageToUpdate" class="uk-input" value="'+messageContent+'" type="text">' +
            '</div>' +
            '<div class="col d-flex align-items-center">' +
                '<button class="uk-button uk-button-primary uk-button-small text-white"' +
                    'style="background-color: #24263d;" href="http://localhost:3000/chat/updatemessage/' + messageToUpdate.value + '">Guardar edición</button>' +
            '</div>' +
        '</div>'
        '<input>'+ messageContent +'</input>'
    }

    function copyMessage(messagecontent) {
        //el parametro recibe el contenido del mensaje bien pero sale undefined al mismo tiempo
        document.execCommand("copy");
        alert("Texto copiado: " + messagecontent)
    }

    function setChatName(chatInfo) {
        if (chatInfo.chatType == 'public') chatName.innerHTML += chatInfo.name
        else {
            $.get("http://localhost:3000/chat/data/" + chatId, data => {
                var users = data.chat.users
                var friend = users.filter(u => u.username != username)
                chatName.innerHTML += 'Tu chat con ' + friend[0].username
            })
        }
    }

    $.get("http://localhost:3000/user/getfriends", data => {
        if (data.status) {
            $.each(data.friends, function () {
                friendsPanel.innerHTML +=
                    '<div class="row">' + this.username + '</div>'
            })
        } else {
            friendsPanel.innerHTML = data.message
        }
    });
    

    // Envia al server que el usuario se conecto
    socket.emit('connected', username, chatId)

    //Si el usuario toca el enter se llama a la función para enviar el mensaje
    message.addEventListener('keypress', function () {
        if (event.keyCode === 13) {
            event.preventDefault();
            sendMessage();
        }
    });

    // Cuando un usuario envia un mensaje, se emite esta accion con el nombre y el mensaje del usuario al servidor
    function sendMessage() {
        if (message.value) {
            socket.emit('message', {
                message: message.value,
                username: username
            });
            message.value = '';
        } else {
            alert("Escribe algo para enviar")
        }
    }

    // Recibe y muestra la conexion de un usuario
    socket.once('userconnect', function (username) {
        messages.innerHTML += '<p>' + username + ' se ha conectado</p>'
    })

    function insertMessages(message) {
        messageId = message._id
        console.log(message.message)
        messageContent= message.message
        messages.innerHTML += '<div id="' + messageId +'" class="row mt-2">'
        messageDiv = document.getElementById(messageId);
        messageDiv.innerHTML += 
            '<div class="col-md-1" style=";">' +
                '<img src="{{avatar}}" class="avatarImg" alt="wow">' +
            '</div>' +
            '<div class="col-md-9">' +
                '<div class="row d-flex align-items-center" style="height:30%;"> ' +
                    '<a class="uk-text-bold uk-text-primary">' + message.user.username + '</a>' +
                    '<small class="uk-text-muted"> &nbsp&nbsp&nbsp&nbsphace ' + convertUntilNow(message.createdAt) + '</small>' +
                '</div>' +
                '<div class="row mt-2">' +
                    '<p>' + message.message + '</p>' +
                    '<div id="'+messageId+'"><br></div>' +
                '</div>' +
            '</div>'
        if(message.user.username == username){
            messageDiv.innerHTML += 
            '<div class="col d-flex align-items-center"> ' +
                '<button class="uk-icon-link uk-margin-small-right" uk-icon="copy" onClick = "copyMessage('+message.message+')"></button>' +
                '<button class="uk-icon-link uk-margin-small-right" uk-icon="file-edit" onClick = "updateMessage('+message+')"></button>' +
                '<button class="uk-icon-link" uk-icon="trash" onClick = "deleteMessage(messageId)"></button>' +
            '</div>'
        }
    }

    // Recibe y mustra el historial de mensajes
    socket.on('chathistory', function (messages, chatinfo) {
        $.each(messages, function () {
            insertMessages(this)
        })
        setChatName(chatinfo)
    })

    // Recibe y muestra la desconexion de un usuario
    socket.on('userdisconnect', function (username) {
        messages.innerHTML += '<p>' + username + ' se ha desconectado</p>'
    })

    // Si el usuario esta escribiendo se le informa al servidor
    message.addEventListener('keypress', function () {
        socket.emit('typing', username)
    });

    // Recibe y muestra cuando el usuario esta escribiendo
    socket.on('typing', function (data) {
        actions.innerHTML = '<p><em style="color: black">' + data + ' está escribiendo</em></p>'
    });

    // Recibe y muestra el mensaje del usuario
    socket.on('message', function (data) {
        actions.innerHTML = "";
        insertMessages(data)
    });
</script>